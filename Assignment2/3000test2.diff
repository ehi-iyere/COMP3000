*** 3000test.c	2020-10-03 13:51:09.000000000 -0400
--- 3000testP2Q2.c	2020-11-03 19:23:40.564000000 -0500
***************
*** 21,26 ****
--- 21,51 ----
          exit(-1);
  }
  
+ void sparsecheck(const char *path){
+ 
+ 	int filesize, blocksize, numblock;
+ 	struct stat buf;
+ 	
+ 
+ 	if(path==NULL){return;}
+ 
+ 	if(stat(path, &buf)){return;}
+ 
+ 	if(!((S_ISLNK(buf.st_mode))||(S_ISREG(buf.st_mode)))){return ;}
+ 
+ 	filesize= buf.st_size;
+ 	blocksize= buf.st_blksize;
+ 	numblock=buf.st_blocks;
+ 
+ 	if(filesize>(blocksize*numblock)){
+ 	printf("\tThis file has holes\n");
+ 	}
+ 	else{
+ 	  printf("\tThis file does not have holes\n");
+ 	}
+ 
+ 
+ }
  int main(int argc, char *argv[])
  {
          struct stat statbuf;
***************
*** 48,55 ****
  
          len = statbuf.st_size;
          printf("File %s: \n", fn);
!         printf("   inode %ld\n", statbuf.st_ino);
!         printf("  length %ld\n", len);        
  
          if (S_ISREG(statbuf.st_mode)) {
                  fd = open(fn, O_RDONLY);
--- 73,80 ----
  
          len = statbuf.st_size;
          printf("File %s: \n", fn);
!         printf("\tinode %ld\n", statbuf.st_ino);
!         printf("\tlength %ld\n", len);        
  
          if (S_ISREG(statbuf.st_mode)) {
                  fd = open(fn, O_RDONLY);
***************
*** 69,81 ****
                          }
                  }
  
!                 printf(" a count %ld\n", count);
  
                  if (munmap(data, len) == -1) {
                          report_error(strerror(errno));                        
                  }
                  close(fd);
          }
  
          return 0;
  }
--- 94,108 ----
                          }
                  }
  
!                 printf("\ta count %ld\n", count);
  
                  if (munmap(data, len) == -1) {
                          report_error(strerror(errno));                        
                  }
                  close(fd);
          }
+ 	printf("\t----using sparse check-----\n");
+ 	sparsecheck(fn);
  
          return 0;
  }
